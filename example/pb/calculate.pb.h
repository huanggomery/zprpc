// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: calculate.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_calculate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_calculate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_calculate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_calculate_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_calculate_2eproto;
namespace zprpc {
class CalcRequest;
struct CalcRequestDefaultTypeInternal;
extern CalcRequestDefaultTypeInternal _CalcRequest_default_instance_;
class CalcResponse;
struct CalcResponseDefaultTypeInternal;
extern CalcResponseDefaultTypeInternal _CalcResponse_default_instance_;
}  // namespace zprpc
PROTOBUF_NAMESPACE_OPEN
template<> ::zprpc::CalcRequest* Arena::CreateMaybeMessage<::zprpc::CalcRequest>(Arena*);
template<> ::zprpc::CalcResponse* Arena::CreateMaybeMessage<::zprpc::CalcResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace zprpc {

// ===================================================================

class CalcRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zprpc.CalcRequest) */ {
 public:
  inline CalcRequest() : CalcRequest(nullptr) {}
  ~CalcRequest() override;
  explicit PROTOBUF_CONSTEXPR CalcRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CalcRequest(const CalcRequest& from);
  CalcRequest(CalcRequest&& from) noexcept
    : CalcRequest() {
    *this = ::std::move(from);
  }

  inline CalcRequest& operator=(const CalcRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalcRequest& operator=(CalcRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalcRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalcRequest* internal_default_instance() {
    return reinterpret_cast<const CalcRequest*>(
               &_CalcRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CalcRequest& a, CalcRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CalcRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalcRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalcRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalcRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CalcRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CalcRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalcRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zprpc.CalcRequest";
  }
  protected:
  explicit CalcRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNum1FieldNumber = 1,
    kNum2FieldNumber = 2,
  };
  // double num1 = 1;
  void clear_num1();
  double num1() const;
  void set_num1(double value);
  private:
  double _internal_num1() const;
  void _internal_set_num1(double value);
  public:

  // double num2 = 2;
  void clear_num2();
  double num2() const;
  void set_num2(double value);
  private:
  double _internal_num2() const;
  void _internal_set_num2(double value);
  public:

  // @@protoc_insertion_point(class_scope:zprpc.CalcRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double num1_;
  double num2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_calculate_2eproto;
};
// -------------------------------------------------------------------

class CalcResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:zprpc.CalcResponse) */ {
 public:
  inline CalcResponse() : CalcResponse(nullptr) {}
  ~CalcResponse() override;
  explicit PROTOBUF_CONSTEXPR CalcResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CalcResponse(const CalcResponse& from);
  CalcResponse(CalcResponse&& from) noexcept
    : CalcResponse() {
    *this = ::std::move(from);
  }

  inline CalcResponse& operator=(const CalcResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CalcResponse& operator=(CalcResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CalcResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CalcResponse* internal_default_instance() {
    return reinterpret_cast<const CalcResponse*>(
               &_CalcResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CalcResponse& a, CalcResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CalcResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CalcResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CalcResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CalcResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CalcResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CalcResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CalcResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "zprpc.CalcResponse";
  }
  protected:
  explicit CalcResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // double result = 1;
  void clear_result();
  double result() const;
  void set_result(double value);
  private:
  double _internal_result() const;
  void _internal_set_result(double value);
  public:

  // @@protoc_insertion_point(class_scope:zprpc.CalcResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_calculate_2eproto;
};
// ===================================================================

class CalcService_Stub;

class CalcService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline CalcService() {};
 public:
  virtual ~CalcService();

  typedef CalcService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Add(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::zprpc::CalcRequest* request,
                       ::zprpc::CalcResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Multiply(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::zprpc::CalcRequest* request,
                       ::zprpc::CalcResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(CalcService);
};

class CalcService_Stub : public CalcService {
 public:
  CalcService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  CalcService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~CalcService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements CalcService ------------------------------------------

  void Add(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::zprpc::CalcRequest* request,
                       ::zprpc::CalcResponse* response,
                       ::google::protobuf::Closure* done);
  void Multiply(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::zprpc::CalcRequest* request,
                       ::zprpc::CalcResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(CalcService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CalcRequest

// double num1 = 1;
inline void CalcRequest::clear_num1() {
  num1_ = 0;
}
inline double CalcRequest::_internal_num1() const {
  return num1_;
}
inline double CalcRequest::num1() const {
  // @@protoc_insertion_point(field_get:zprpc.CalcRequest.num1)
  return _internal_num1();
}
inline void CalcRequest::_internal_set_num1(double value) {
  
  num1_ = value;
}
inline void CalcRequest::set_num1(double value) {
  _internal_set_num1(value);
  // @@protoc_insertion_point(field_set:zprpc.CalcRequest.num1)
}

// double num2 = 2;
inline void CalcRequest::clear_num2() {
  num2_ = 0;
}
inline double CalcRequest::_internal_num2() const {
  return num2_;
}
inline double CalcRequest::num2() const {
  // @@protoc_insertion_point(field_get:zprpc.CalcRequest.num2)
  return _internal_num2();
}
inline void CalcRequest::_internal_set_num2(double value) {
  
  num2_ = value;
}
inline void CalcRequest::set_num2(double value) {
  _internal_set_num2(value);
  // @@protoc_insertion_point(field_set:zprpc.CalcRequest.num2)
}

// -------------------------------------------------------------------

// CalcResponse

// double result = 1;
inline void CalcResponse::clear_result() {
  result_ = 0;
}
inline double CalcResponse::_internal_result() const {
  return result_;
}
inline double CalcResponse::result() const {
  // @@protoc_insertion_point(field_get:zprpc.CalcResponse.result)
  return _internal_result();
}
inline void CalcResponse::_internal_set_result(double value) {
  
  result_ = value;
}
inline void CalcResponse::set_result(double value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:zprpc.CalcResponse.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zprpc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_calculate_2eproto
